---
description: 
globs: 
alwaysApply: true
---
# Git 運用ルール

## ブランチ命名規則
- 機能追加: feature/機能名
- バグ修正: fix/バグ内容
- リファクタリング: refactor/内容
- ホットフィックス: hotfix/内容

## コミットメッセージ規則
- 1行目：変更の要約（50文字以内）
- 2行目：空行
- 3行目以降：詳細な説明
- 日本語で記述すること
- 複数行のコミットメッセージは\nを使って1行のコマンドにまとめる（\n\nで空行を表現）

例：
git commit -m "ログイン機能の実装\n\n- ユーザー認証機能を追加\n- セッション管理の仕組みを実装\n- テストケースを追加"

## 差分の確認
- git diff でステージングされていない変更を確認
- git diff --staged でステージング済みの変更を確認

## コミット前チェックリスト
- テストを追加/更新した
- ローカルでテストを実行し、パスすることを確認した
- 必要なドキュメントを更新した
- .gitignoreに新しいファイルパターンの追加が必要ないか確認した
- 環境変数の変更がある場合、.env.exampleを更新した

## 基本的なGitコマンド集

# 新しいブランチを作成して切り替え
git checkout -b feature/機能名

# 変更をステージングに追加
git add .

# 変更をコミット（\nを使って複数行のメッセージも1行のコマンドで）
git commit -m "タイトル\n\n詳細な説明\n- 箇条書き1\n- 箇条書き2"

# リモートにプッシュ
git push origin feature/機能名

# mainブランチに戻る
git checkout main

# 最新の変更を取得
git pull origin main

# ブランチをマージ（例：feature/機能名をmainに）
git merge feature/機能名

# コミット履歴を確認
git log --oneline --graph --decorate

## 個人開発時の影響範囲確認
コミットする前に以下の点を確認：
- 影響を受けるコンポーネント
- データベースへの影響
- パフォーマンスへの影響

## テスト項目
コミット前に必ず確認：
- 実施したテストの内容
- テスト環境
- テスト結果

## 良いコミットの原則
- 1つの論理的な変更ごとにコミットする
- コミットは小さく保つ
- コミットメッセージは明確に書く
- 動作しないコードはコミットしない
- すべてのGitコマンドは1行で記述する（複数行にわたる内容は\nで改行）


